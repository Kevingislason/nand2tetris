// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //A Register
        ARegister(in=AInput, load=LoadA, out=AOut);

        //Address M is just output from the A register
        And16(a=AOut, b=true, out[0..14]=addressM);

        //We load a new value to the A register only if...
        //1. we're getting an A instruction
        Not(in=instruction[15], out=AInstruction);
        //2. we're getting a D instruction && the first destination bit is selected
        And(a=instruction[15], b=instruction[5], out=DInstructionLoadA);

        Or(a=AInstruction, b=DInstructionLoadA, out=LoadA);

        //Depending on which condition is met, A will load in
        //1) the incoming instruction
        //or 2) the ALU output
        Mux16(a=instruction, b=ALUOut, sel=DInstructionLoadA, out=AInput);



    //D Register
        //Load ALU output the D register if we have a C instruction with the proper load bit
        And(a=instruction[4], b=instruction[15], out=loadD);
        DRegister(in=ALUOut, load=loadD, out=DOut);


    //ALU

        //Depending on instruction[12], we use either A register or M(emory) in the ALU
        Mux16(a=AOut, b=inM, sel=instruction[12], out=MOrA);

        ALU(x=DOut, y=MOrA, zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOut, zr=zr, ng=ng);

        //Write ALU output to M if we have a C instruction with the proper load bit
        And(a=instruction[3], b=instruction[15], out=writeM);

        //outM is just the ALU output
        And16(a=true, b=ALUOut, out=outM);











    //Program Counter
    PC(in=AOut, load=JumpOK, inc=noJump, reset=reset, out[0..14]=pc);

    //We use this logic to test if jump condition is met:
        //Alu output is 0
        And(a=zr, b=true, out=ALUOutputIsZero);
        //Alu output is < 0
        And(a=ng, b=true, out=ALUOutputIsNegative);
        //Alu output is > 0
        Not(in=ALUOutputIsNegative, out=ALUOutputIsNotNegative);
        Not(in=ALUOutputIsZero, out=ALUOutputIsNotZero);
        And(a=ALUOutputIsNotZero, b=ALUOutputIsNotNegative, out=AlUOutputIsPositive);

        //Jump conditions in instruction are met
        And(a=ALUOutputIsNegative, b=instruction[2], out=Cond1);
        And(a=ALUOutputIsZero, b=instruction[1], out=Cond2);
        And(a=AlUOutputIsPositive, b=instruction[0], out=Cond3);
        Or(a=Cond1, b=Cond2, out=Cond1Or2);
        Or(a=Cond3, b=Cond1Or2, out=JumpConditionsMet);

        //As it stands, we risk jumping even on A instructions...
        And(a=instruction[15], b=JumpConditionsMet, out=JumpOK);
        Not(in=JumpOK, out=noJump);
}
